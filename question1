聊一聊你对JVM的原理，如何减少Full GC的情况？
针对高并发场景，如何优化，都采用了什么技术？
相比关系型数据库，NoSQL的优势在哪里，你们在什么场景下会用到？

技术的突破需要依赖业务场景的需求和自身刻意的规划学习，二者缺一不可，但前者是机会，往往不是自己能完全把控的，如果在自己工作中没有实践场景，
最好的办法就是系统的学习与梳理，为自己制定一个不同时间段的发展道路，待机会来临时就能一展身手。

以工作前5年的规划为例，至少需要突破三个层次：
1.实质上这是忽略了技术开发的本质，技术开发是一个工程项目，而工程项目的落地最重要的就是细节控制，也就是代码的品质，比如：
    1). 代码是否遵循了规约？接口设计的是否随意？测试用例是否都通过？

    2). 满屏的if-else是否可以用合理的设计模式来替代？有没有遵循SOLID原则，KISS原则？

    3). 有没有考虑用更合理的数据结构和算法改变代码的复杂性，提升运行的性能？

    4). 代码出bug的概率有多大，能否降低？
   这是程序员的立足之本，基本是工作1年左右要达到的。在这一阶段看书是比较好的提升方式，比如：《Java编程思想》、《effective java》等。但要注意的是，在看书的过程中一定要思考能否运用书中的经验来改善自己写的代码，运用到实处，比如看到final和static，想想自己代码中用的是否合理。
 
2. 跳出来，主动了解技术全貌
在将基础打牢之后，需要主动突破舒适区，不断的去扩大自己的技术视野，做到有广度。

这一步比较难，因为很多同学会被公司的技术和业务牵着走，比如公司当前的业务规模决定了技术上不需要分布式技术，那么很多同学就不会去思考如果规模大了之后，如何利用分布式技术解决该问题。

如何解决这个问题？除了寻找更大规模的业务外，要时刻保持时刻跳出当前层级和环境来思考的习惯。比如，你只用了关系型数据库，那么有没有想过数据一直产生，到达TB级别的时候该如何快速检索与保存呢？

此外，技术的全貌还包括各种技术之间的关系，你用了Dubbo，那么Duboo和Netty是什么关系，为什么会用到Zookeeper呢，和Spring Cloud又是什么关系？如果能在学习新技术的时候，将繁杂的技术关系理顺，会有一览众山小的感觉。

3. 不去造轮子，前提是得知道轮子的内部结构
如果说，第二步是增加你的知识广度，那么造轮子就是增加你的技术深度，通过造轮子，才能真正把握技术的来龙去脉。

很多人信奉“不去造轮子”，看似性价比很高的一句话，却不知道这句话是有前提的，那就是“你得知道轮子的内部结构”，否则就是自我麻痹。接下来需要选择某一个或几个方面深入研究下去，构建自己的核心竞争力。

比如，消息队列在高并发分布式系统中一个及其重要的组件，起到削峰填谷、系统解耦的作用。我们以消费端如何快速获取数据来看思维是如何一步步深入的：

首先消费端要想及时获取数据，是否需要建立一个长连接？长连接的实现方式如何？

数据是通过push还是pull方式给到消费端，各自有什么弊端？

如果消费失败，可能是哪些原因引起？如果是因为网络原因引起，该如何解决？

这些问题都会在你自己造轮子的过程中暴露出来，从而加深你的理解和技术深度，一个有技术深度的程序员才是有灵魂的。而大厂也是愿意为有趣的灵魂买单的，这个时候看的就不仅仅是工资水平，更多的是在于晋升和发展前景的广阔性。
    
在Java语言上有所建树的开发者，都经历过以上3个层次。但可惜的是，囿于外界环境和自身设限，大部分的Java开发者却只停留在了第一个层次中，在日复一日的体力劳动中丧失了对技术细节的深入探讨，也丧失了晋升和薪资谈判中的筹码。
